*** cli.js ***
#!/usr/bin/env node

const readJSFiles = require('./index');
const minimist = require('minimist');
const fs = require('fs');

const options = minimist(process.argv.slice(2), {
  alias: {
    c: 'config',
  },
  default: {
    config: '',
  },
});

if (options._.length !== 2) {
  console.error('Usage: repo-loader <repository_path> <output_file_path> [-c /path/to/config.json]');
  process.exit(1);
}

const [repoPath, outputPath] = options._;
const configPath = options.config;

let config = {
  include: ['**/*.js'],
  exclude: ['node_modules/**'],
};

if (configPath) {
  try {
    const configFileContent = fs.readFileSync(configPath, 'utf8');
    const configFileConfig = JSON.parse(configFileContent);
    config = {
      ...config,
      ...configFileConfig,
      exclude: [...config.exclude, ...(configFileConfig.exclude || [])],
    };
  } catch (error) {
    console.error('Error reading or parsing the config file:', error.message);
    process.exit(1);
  }
}

readJSFiles(repoPath, outputPath, config);


*** index.js ***
const glob = require('glob');
const fs = require('fs');
const path = require('path');

function readJSFiles(repoPath, outputPath, config) {
  const { include, exclude } = config;

  const includePatterns = (Array.isArray(include) ? include : [include]).map((pattern) => path.join(repoPath, pattern));
  const excludePatterns = (Array.isArray(exclude) ? exclude : [exclude]).map((pattern) => path.join(repoPath, pattern));

  const globOptions = {
    ignore: excludePatterns,
  };

  const outputData = [];

  function processNextPattern(index) {
    if (index >= includePatterns.length) {
      fs.writeFile(outputPath, outputData.join('\n'), 'utf8', (err) => {
        if (err) {
          console.error('Error writing output file:', err);
          return;
        }
        console.log(`JS code written to ${outputPath}`);
      });
      return;
    }

    const pattern = includePatterns[index];

    glob(pattern, globOptions, (err, files) => {
      if (err) {
        console.error('Error reading JS files:', err);
        return;
      }

      outputData.push(
        ...files.map((file) => {
          const content = fs.readFileSync(file, 'utf8');
          const filename = path.basename(file);
          return `*** ${filename} ***\n${content}\n`;
        }),
      );

      processNextPattern(index + 1);
    });
  }

  processNextPattern(0);
}

module.exports = readJSFiles;

